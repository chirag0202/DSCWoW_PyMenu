---
#tasks file for ec2
          - name: Create ec2 key
            ec2_key:
                    name: "key"
                    region: "ap-south-1"
                    aws_access_key: "{{ access_key }}"
                    aws_secret_key: "{{ secret_key }}"
            register: ec2_key
          - name: Save the key in a file
            copy: 
              content: "{{ ec2_key.key.private_key }}"  
              dest: "./keys/key.pem"  
              mode: 0400
            when: ec2_key.changed
          - name: LoadBalancers on aws
            ec2:
                    key_name: "key"
                    instance_type: "t2.micro"
                    image: "ami-0ebc1ac48dfd14136"
                    wait: yes
                    count: 1
                    vpc_subnet_id: "subnet-3df9c355"
                    instance_tags: {"Name":"LoadBalancer"}
                    assign_public_ip: yes
                    region: "ap-south-1"
                    state: present
                    group_id: "sg-035d6d20f3467a621"
                    aws_access_key: "{{ access_key }}"
                    aws_secret_key: "{{ secret_key }}"
            register: ec21
          - name: Webservers on aws
            ec2:
                    key_name: "key"
                    instance_type: "t2.micro"
                    image: "ami-0ebc1ac48dfd14136"
                    wait: yes
                    count: 4
                    vpc_subnet_id: "subnet-3df9c355"
                    instance_tags: {"Name":"Webserver"}
                    assign_public_ip: yes
                    region: "ap-south-1"
                    state: present
                    group_id: "sg-035d6d20f3467a621"
                    aws_access_key: "{{ access_key }}"
                    aws_secret_key: "{{ secret_key }}"
            register: ec22
          - name: Wait for Loadbalancer to launch
            wait_for:
                    host: "{{ item.public_ip }}"
                    port: 22
                    state: started
            with_items: "{{ ec21.instances }}"
          - name: Wait for Webserver to launch
            wait_for:
                    host: "{{ item.public_ip }}"
                    port: 22
                    state: started
            with_items: "{{ ec22.instances }}"

          - name: Update hosts file
            template:
              src: hosts.j2
              dest: hosts
          - name: Copy updated hosts file
            copy:
              dest: /etc/ansible/hosts
              src: hosts
          - name: "Refresh Inventory"
            meta: refresh_inventory

          - name: "Pause execution for 30 seconds"
            pause: 
                    seconds: '30'
